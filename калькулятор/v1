#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//#includes <unistd.h>
#include <pthread.h>

#define sh 5
#define be 3
int shop[sh];
int id=0;
pthread_mutex_t mutex;


void *print_shop( void *args)

{
    int i,j;
    pthread_mutex_lock(&mutex);
    printf("I am shop\n shop[i]=%d",shop[j]);
    pthread_mutex_unlock(&mutex);
    return 0;
}

void *print_loader(void *args)
{
    int buff;
    int i = 0;

     while (i <= 7 ){
    pthread_mutex_lock(&mutex);
    buff = 0 + rand() % 5;
    shop[buff] = shop[buff] + 500;
    printf("\nWorker: In the shop %d were %d products. Now = %d", buff,
           shop[buff] - 500, shop[buff]);
    pthread_mutex_unlock(&mutex);

   // sleep(2);
    i++;
  }


  return 0;
}

void *print_buyer(void *args)
{


    int ID=id;
    int zp=0;
    id++;

    zp=900+rand()%201;
    int buff;

    printf("\nI am buyer â„–%d initail value: %d\n",id,zp);
     while (zp > 0) {
    pthread_mutex_lock(&mutex);

    buff= 0 + rand() % 5;
    if (zp >= shop[buff]) {
      zp = zp - shop[buff];
      printf("\nByer %d:\tI am going to shop N: %d\t\tIn shop: %d Me: %d", id,
             buff, shop[buff], zp);
      shop[buff] = 0;

    } else {
      shop[buff] = shop[buff] - zp;
      zp = 0;
      printf("\nByer %d:\tI am going to shop N: %d\tIn shop: %d Me: %d", id,
             buff, shop[buff], zp);
    }
    pthread_mutex_unlock(&mutex);
   // sleep(2);

    if (zp == 0) {
      printf("\nByer %d:\t I have done. I am going home!\n", id);
      return 0;
    }
  }
}



int main()
{
    srand(time(NULL));

    int loader =200;
    pthread_t thread1[3];
    pthread_t thread2;
    int i=0;


    pthread_mutex_init(&mutex, NULL);

    int buff;



  for (int i = 0; i < 5; i++)
   {
    shop[i] = 0 + rand() % 500;
   }

 
  printf("\nCreating byers!\n");
  for(i=0;i<3;i++)
        {
            pthread_create(&thread1[i],NULL,*print_buyer,NULL);
        }
  pthread_create(&thread2,NULL,print_loader,NULL);

 
    for(i=0;i<3;i++)
        {
            pthread_join(thread1[i],NULL);
        }

        pthread_join(thread2,NULL);


  pthread_mutex_destroy(&mutex);
  return 0;
}
